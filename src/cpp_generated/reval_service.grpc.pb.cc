// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: reval_service.proto

#include "reval_service.pb.h"
#include "reval_service.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* REvalService_method_names[] = {
  "/REvalService/EvalRScript",
  "/REvalService/GetEvalOperation",
  "/REvalService/CancelEvalOperation",
};

std::unique_ptr< REvalService::Stub> REvalService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< REvalService::Stub> stub(new REvalService::Stub(channel, options));
  return stub;
}

REvalService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_EvalRScript_(REvalService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEvalOperation_(REvalService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelEvalOperation_(REvalService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status REvalService::Stub::EvalRScript(::grpc::ClientContext* context, const ::EvalRScriptRequest& request, ::EvalOperation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::EvalRScriptRequest, ::EvalOperation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_EvalRScript_, context, request, response);
}

void REvalService::Stub::async::EvalRScript(::grpc::ClientContext* context, const ::EvalRScriptRequest* request, ::EvalOperation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::EvalRScriptRequest, ::EvalOperation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EvalRScript_, context, request, response, std::move(f));
}

void REvalService::Stub::async::EvalRScript(::grpc::ClientContext* context, const ::EvalRScriptRequest* request, ::EvalOperation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_EvalRScript_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::EvalOperation>* REvalService::Stub::PrepareAsyncEvalRScriptRaw(::grpc::ClientContext* context, const ::EvalRScriptRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::EvalOperation, ::EvalRScriptRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_EvalRScript_, context, request);
}

::grpc::ClientAsyncResponseReader< ::EvalOperation>* REvalService::Stub::AsyncEvalRScriptRaw(::grpc::ClientContext* context, const ::EvalRScriptRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncEvalRScriptRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status REvalService::Stub::GetEvalOperation(::grpc::ClientContext* context, const ::GetEvalOperationRequest& request, ::EvalOperation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::GetEvalOperationRequest, ::EvalOperation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetEvalOperation_, context, request, response);
}

void REvalService::Stub::async::GetEvalOperation(::grpc::ClientContext* context, const ::GetEvalOperationRequest* request, ::EvalOperation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::GetEvalOperationRequest, ::EvalOperation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEvalOperation_, context, request, response, std::move(f));
}

void REvalService::Stub::async::GetEvalOperation(::grpc::ClientContext* context, const ::GetEvalOperationRequest* request, ::EvalOperation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetEvalOperation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::EvalOperation>* REvalService::Stub::PrepareAsyncGetEvalOperationRaw(::grpc::ClientContext* context, const ::GetEvalOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::EvalOperation, ::GetEvalOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetEvalOperation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::EvalOperation>* REvalService::Stub::AsyncGetEvalOperationRaw(::grpc::ClientContext* context, const ::GetEvalOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetEvalOperationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status REvalService::Stub::CancelEvalOperation(::grpc::ClientContext* context, const ::CancelEvalOperationRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::CancelEvalOperationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelEvalOperation_, context, request, response);
}

void REvalService::Stub::async::CancelEvalOperation(::grpc::ClientContext* context, const ::CancelEvalOperationRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::CancelEvalOperationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelEvalOperation_, context, request, response, std::move(f));
}

void REvalService::Stub::async::CancelEvalOperation(::grpc::ClientContext* context, const ::CancelEvalOperationRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelEvalOperation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* REvalService::Stub::PrepareAsyncCancelEvalOperationRaw(::grpc::ClientContext* context, const ::CancelEvalOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::CancelEvalOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelEvalOperation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* REvalService::Stub::AsyncCancelEvalOperationRaw(::grpc::ClientContext* context, const ::CancelEvalOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelEvalOperationRaw(context, request, cq);
  result->StartCall();
  return result;
}

REvalService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      REvalService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< REvalService::Service, ::EvalRScriptRequest, ::EvalOperation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](REvalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::EvalRScriptRequest* req,
             ::EvalOperation* resp) {
               return service->EvalRScript(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      REvalService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< REvalService::Service, ::GetEvalOperationRequest, ::EvalOperation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](REvalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::GetEvalOperationRequest* req,
             ::EvalOperation* resp) {
               return service->GetEvalOperation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      REvalService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< REvalService::Service, ::CancelEvalOperationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](REvalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::CancelEvalOperationRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->CancelEvalOperation(ctx, req, resp);
             }, this)));
}

REvalService::Service::~Service() {
}

::grpc::Status REvalService::Service::EvalRScript(::grpc::ServerContext* context, const ::EvalRScriptRequest* request, ::EvalOperation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status REvalService::Service::GetEvalOperation(::grpc::ServerContext* context, const ::GetEvalOperationRequest* request, ::EvalOperation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status REvalService::Service::CancelEvalOperation(::grpc::ServerContext* context, const ::CancelEvalOperationRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


