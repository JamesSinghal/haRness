// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: reval_service.proto
#ifndef GRPC_reval_5fservice_2eproto__INCLUDED
#define GRPC_reval_5fservice_2eproto__INCLUDED

#include "reval_service.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class REvalService final {
 public:
  static constexpr char const* service_full_name() {
    return "REvalService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Initial eval operation creator RPC
    virtual ::grpc::Status EvalRScript(::grpc::ClientContext* context, const ::EvalRScriptRequest& request, ::EvalOperation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EvalOperation>> AsyncEvalRScript(::grpc::ClientContext* context, const ::EvalRScriptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EvalOperation>>(AsyncEvalRScriptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EvalOperation>> PrepareAsyncEvalRScript(::grpc::ClientContext* context, const ::EvalRScriptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EvalOperation>>(PrepareAsyncEvalRScriptRaw(context, request, cq));
    }
    // get the status of a long-running R evaluation
    virtual ::grpc::Status GetEvalOperation(::grpc::ClientContext* context, const ::GetEvalOperationRequest& request, ::EvalOperation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EvalOperation>> AsyncGetEvalOperation(::grpc::ClientContext* context, const ::GetEvalOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EvalOperation>>(AsyncGetEvalOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EvalOperation>> PrepareAsyncGetEvalOperation(::grpc::ClientContext* context, const ::GetEvalOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::EvalOperation>>(PrepareAsyncGetEvalOperationRaw(context, request, cq));
    }
    // attempt to cancel a long-running R evaluation, will attempt SIGINT
    // R interruption
    virtual ::grpc::Status CancelEvalOperation(::grpc::ClientContext* context, const ::CancelEvalOperationRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncCancelEvalOperation(::grpc::ClientContext* context, const ::CancelEvalOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncCancelEvalOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncCancelEvalOperation(::grpc::ClientContext* context, const ::CancelEvalOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncCancelEvalOperationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Initial eval operation creator RPC
      virtual void EvalRScript(::grpc::ClientContext* context, const ::EvalRScriptRequest* request, ::EvalOperation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void EvalRScript(::grpc::ClientContext* context, const ::EvalRScriptRequest* request, ::EvalOperation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // get the status of a long-running R evaluation
      virtual void GetEvalOperation(::grpc::ClientContext* context, const ::GetEvalOperationRequest* request, ::EvalOperation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEvalOperation(::grpc::ClientContext* context, const ::GetEvalOperationRequest* request, ::EvalOperation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // attempt to cancel a long-running R evaluation, will attempt SIGINT
      // R interruption
      virtual void CancelEvalOperation(::grpc::ClientContext* context, const ::CancelEvalOperationRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelEvalOperation(::grpc::ClientContext* context, const ::CancelEvalOperationRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EvalOperation>* AsyncEvalRScriptRaw(::grpc::ClientContext* context, const ::EvalRScriptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EvalOperation>* PrepareAsyncEvalRScriptRaw(::grpc::ClientContext* context, const ::EvalRScriptRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EvalOperation>* AsyncGetEvalOperationRaw(::grpc::ClientContext* context, const ::GetEvalOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::EvalOperation>* PrepareAsyncGetEvalOperationRaw(::grpc::ClientContext* context, const ::GetEvalOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncCancelEvalOperationRaw(::grpc::ClientContext* context, const ::CancelEvalOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncCancelEvalOperationRaw(::grpc::ClientContext* context, const ::CancelEvalOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status EvalRScript(::grpc::ClientContext* context, const ::EvalRScriptRequest& request, ::EvalOperation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EvalOperation>> AsyncEvalRScript(::grpc::ClientContext* context, const ::EvalRScriptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EvalOperation>>(AsyncEvalRScriptRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EvalOperation>> PrepareAsyncEvalRScript(::grpc::ClientContext* context, const ::EvalRScriptRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EvalOperation>>(PrepareAsyncEvalRScriptRaw(context, request, cq));
    }
    ::grpc::Status GetEvalOperation(::grpc::ClientContext* context, const ::GetEvalOperationRequest& request, ::EvalOperation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EvalOperation>> AsyncGetEvalOperation(::grpc::ClientContext* context, const ::GetEvalOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EvalOperation>>(AsyncGetEvalOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EvalOperation>> PrepareAsyncGetEvalOperation(::grpc::ClientContext* context, const ::GetEvalOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::EvalOperation>>(PrepareAsyncGetEvalOperationRaw(context, request, cq));
    }
    ::grpc::Status CancelEvalOperation(::grpc::ClientContext* context, const ::CancelEvalOperationRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncCancelEvalOperation(::grpc::ClientContext* context, const ::CancelEvalOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncCancelEvalOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncCancelEvalOperation(::grpc::ClientContext* context, const ::CancelEvalOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncCancelEvalOperationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void EvalRScript(::grpc::ClientContext* context, const ::EvalRScriptRequest* request, ::EvalOperation* response, std::function<void(::grpc::Status)>) override;
      void EvalRScript(::grpc::ClientContext* context, const ::EvalRScriptRequest* request, ::EvalOperation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEvalOperation(::grpc::ClientContext* context, const ::GetEvalOperationRequest* request, ::EvalOperation* response, std::function<void(::grpc::Status)>) override;
      void GetEvalOperation(::grpc::ClientContext* context, const ::GetEvalOperationRequest* request, ::EvalOperation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelEvalOperation(::grpc::ClientContext* context, const ::CancelEvalOperationRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void CancelEvalOperation(::grpc::ClientContext* context, const ::CancelEvalOperationRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::EvalOperation>* AsyncEvalRScriptRaw(::grpc::ClientContext* context, const ::EvalRScriptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EvalOperation>* PrepareAsyncEvalRScriptRaw(::grpc::ClientContext* context, const ::EvalRScriptRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EvalOperation>* AsyncGetEvalOperationRaw(::grpc::ClientContext* context, const ::GetEvalOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::EvalOperation>* PrepareAsyncGetEvalOperationRaw(::grpc::ClientContext* context, const ::GetEvalOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncCancelEvalOperationRaw(::grpc::ClientContext* context, const ::CancelEvalOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncCancelEvalOperationRaw(::grpc::ClientContext* context, const ::CancelEvalOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_EvalRScript_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEvalOperation_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelEvalOperation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Initial eval operation creator RPC
    virtual ::grpc::Status EvalRScript(::grpc::ServerContext* context, const ::EvalRScriptRequest* request, ::EvalOperation* response);
    // get the status of a long-running R evaluation
    virtual ::grpc::Status GetEvalOperation(::grpc::ServerContext* context, const ::GetEvalOperationRequest* request, ::EvalOperation* response);
    // attempt to cancel a long-running R evaluation, will attempt SIGINT
    // R interruption
    virtual ::grpc::Status CancelEvalOperation(::grpc::ServerContext* context, const ::CancelEvalOperationRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_EvalRScript : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_EvalRScript() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_EvalRScript() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EvalRScript(::grpc::ServerContext* /*context*/, const ::EvalRScriptRequest* /*request*/, ::EvalOperation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEvalRScript(::grpc::ServerContext* context, ::EvalRScriptRequest* request, ::grpc::ServerAsyncResponseWriter< ::EvalOperation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEvalOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEvalOperation() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetEvalOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvalOperation(::grpc::ServerContext* /*context*/, const ::GetEvalOperationRequest* /*request*/, ::EvalOperation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEvalOperation(::grpc::ServerContext* context, ::GetEvalOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::EvalOperation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelEvalOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelEvalOperation() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CancelEvalOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelEvalOperation(::grpc::ServerContext* /*context*/, const ::CancelEvalOperationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelEvalOperation(::grpc::ServerContext* context, ::CancelEvalOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_EvalRScript<WithAsyncMethod_GetEvalOperation<WithAsyncMethod_CancelEvalOperation<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_EvalRScript : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_EvalRScript() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::EvalRScriptRequest, ::EvalOperation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::EvalRScriptRequest* request, ::EvalOperation* response) { return this->EvalRScript(context, request, response); }));}
    void SetMessageAllocatorFor_EvalRScript(
        ::grpc::MessageAllocator< ::EvalRScriptRequest, ::EvalOperation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::EvalRScriptRequest, ::EvalOperation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_EvalRScript() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EvalRScript(::grpc::ServerContext* /*context*/, const ::EvalRScriptRequest* /*request*/, ::EvalOperation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EvalRScript(
      ::grpc::CallbackServerContext* /*context*/, const ::EvalRScriptRequest* /*request*/, ::EvalOperation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEvalOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEvalOperation() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::GetEvalOperationRequest, ::EvalOperation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::GetEvalOperationRequest* request, ::EvalOperation* response) { return this->GetEvalOperation(context, request, response); }));}
    void SetMessageAllocatorFor_GetEvalOperation(
        ::grpc::MessageAllocator< ::GetEvalOperationRequest, ::EvalOperation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::GetEvalOperationRequest, ::EvalOperation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEvalOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvalOperation(::grpc::ServerContext* /*context*/, const ::GetEvalOperationRequest* /*request*/, ::EvalOperation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEvalOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::GetEvalOperationRequest* /*request*/, ::EvalOperation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelEvalOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelEvalOperation() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::CancelEvalOperationRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::CancelEvalOperationRequest* request, ::google::protobuf::Empty* response) { return this->CancelEvalOperation(context, request, response); }));}
    void SetMessageAllocatorFor_CancelEvalOperation(
        ::grpc::MessageAllocator< ::CancelEvalOperationRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::CancelEvalOperationRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelEvalOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelEvalOperation(::grpc::ServerContext* /*context*/, const ::CancelEvalOperationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelEvalOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::CancelEvalOperationRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_EvalRScript<WithCallbackMethod_GetEvalOperation<WithCallbackMethod_CancelEvalOperation<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_EvalRScript : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_EvalRScript() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_EvalRScript() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EvalRScript(::grpc::ServerContext* /*context*/, const ::EvalRScriptRequest* /*request*/, ::EvalOperation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEvalOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEvalOperation() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetEvalOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvalOperation(::grpc::ServerContext* /*context*/, const ::GetEvalOperationRequest* /*request*/, ::EvalOperation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelEvalOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelEvalOperation() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CancelEvalOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelEvalOperation(::grpc::ServerContext* /*context*/, const ::CancelEvalOperationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_EvalRScript : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_EvalRScript() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_EvalRScript() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EvalRScript(::grpc::ServerContext* /*context*/, const ::EvalRScriptRequest* /*request*/, ::EvalOperation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestEvalRScript(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEvalOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEvalOperation() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetEvalOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvalOperation(::grpc::ServerContext* /*context*/, const ::GetEvalOperationRequest* /*request*/, ::EvalOperation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEvalOperation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelEvalOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelEvalOperation() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CancelEvalOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelEvalOperation(::grpc::ServerContext* /*context*/, const ::CancelEvalOperationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelEvalOperation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_EvalRScript : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_EvalRScript() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->EvalRScript(context, request, response); }));
    }
    ~WithRawCallbackMethod_EvalRScript() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status EvalRScript(::grpc::ServerContext* /*context*/, const ::EvalRScriptRequest* /*request*/, ::EvalOperation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* EvalRScript(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEvalOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEvalOperation() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEvalOperation(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEvalOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvalOperation(::grpc::ServerContext* /*context*/, const ::GetEvalOperationRequest* /*request*/, ::EvalOperation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEvalOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelEvalOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelEvalOperation() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelEvalOperation(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelEvalOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelEvalOperation(::grpc::ServerContext* /*context*/, const ::CancelEvalOperationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelEvalOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_EvalRScript : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_EvalRScript() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::EvalRScriptRequest, ::EvalOperation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::EvalRScriptRequest, ::EvalOperation>* streamer) {
                       return this->StreamedEvalRScript(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_EvalRScript() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status EvalRScript(::grpc::ServerContext* /*context*/, const ::EvalRScriptRequest* /*request*/, ::EvalOperation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedEvalRScript(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::EvalRScriptRequest,::EvalOperation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEvalOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEvalOperation() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::GetEvalOperationRequest, ::EvalOperation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::GetEvalOperationRequest, ::EvalOperation>* streamer) {
                       return this->StreamedGetEvalOperation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEvalOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEvalOperation(::grpc::ServerContext* /*context*/, const ::GetEvalOperationRequest* /*request*/, ::EvalOperation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEvalOperation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::GetEvalOperationRequest,::EvalOperation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelEvalOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelEvalOperation() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::CancelEvalOperationRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::CancelEvalOperationRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedCancelEvalOperation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelEvalOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelEvalOperation(::grpc::ServerContext* /*context*/, const ::CancelEvalOperationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelEvalOperation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::CancelEvalOperationRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_EvalRScript<WithStreamedUnaryMethod_GetEvalOperation<WithStreamedUnaryMethod_CancelEvalOperation<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_EvalRScript<WithStreamedUnaryMethod_GetEvalOperation<WithStreamedUnaryMethod_CancelEvalOperation<Service > > > StreamedService;
};


#endif  // GRPC_reval_5fservice_2eproto__INCLUDED
